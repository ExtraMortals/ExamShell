# IRL CHECKER ############################################################
import sys
import urllib
import PIL.Image
import cStringIO
import krbV

from PIL import ImageTk
from Tkinter import *
from subprocess import call
from venvdotapp import require_bundle



# METHODS ############################################################

def get_principal():
    ctx = krbV.default_context()
    cc = ctx.default_ccache()
    try:
        princ = cc.principal()
        return princ.name
    except krbV.Krb5Error:
        return None


def get_img(user):
    try:
        img_path = "https://cdn.intra.42.fr/users/medium_{}.jpg".format(user)
        jpg_data = cStringIO.StringIO(urllib.urlopen(img_path).read())
        photo = PIL.Image.open(jpg_data)
        img = ImageTk.PhotoImage(photo)
        return img, photo
    except Exception as e:
        print "Photo download failed"

def on_close():
    pass

def on_move():
    irlcheck.geometry(newGeometry="550x250+0+0")
    try:
        irlcheck.after(0, irlcheck.deiconify())
    except KeyboardInterrupt:
        sys.exit()
    irlcheck.update()

drag_id = ''
def dragging(event):
    global drag_id
    if event.widget is irlcheck:
        if drag_id == '':
            pass
        else:
            irlcheck.after_cancel(drag_id)
        drag_id = irlcheck.after(1000, stop_drag)

def stop_drag():
    global drag_id
    on_move()
    drag_id = ''

def checker(irlcheck, user):
    try:
        img, photo = get_img(user)
        img_w = photo.size[0]
        img_h = photo.size[1]
        canvas = Canvas(irlcheck, width=img_w, height=img_h)
        canvas.create_image(0,0, anchor = NW, image=img)
        canvas.pack()
    except TypeError:
        img_w = img_h = 250
        print("No photo!")
    irlcheck.title("Identity Checker")
    irlcheck.configure(background='grey')
    irlcheck.maxsize(width=img_w, height=img_h)
    irlcheck.minsize(width=img_w, height=img_h)
    irlcheck.resizable(0,0)
    irlcheck.bind('<Configure>', dragging)
    irlcheck.protocol("WM_DELETE_WINDOW", on_close)
    irlcheck.attributes('-topmost',True)
    irlcheck.update()
    try:
        irlcheck.mainloop()
    except KeyboardInterrupt:
        sys.exit()

if __name__ == "__main__":
    require_bundle()
    irlcheck = Tk()
    user = get_principal().split('@')[0]
    checker(irlcheck, user)
